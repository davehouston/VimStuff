" Bundle stuff
set nocompatible
syntax enable
filetype off

source ~/.vim/neobundle.vim

" Basics
colorscheme inkpot
set tabstop=4       " 3 spaces for tabs
set ts=4            " see above.
set shiftwidth=4    " spaces used for auto indent
set expandtab       " Make them spaces
set ls=2            " Always show a status line
set number          " Line numbers
set title           " Set terminal window title
set ruler           " show line & col numbers.
set t_Co=256        " enable 256 colors
set autoindent      " enable auto indentation
set smartindent     " smart indentation
" set iskeyword+=:
set backspace=2     " set backspace=indent,eol,start
set gcr=n:blinkon0  " no blinking cursor
set mouse=a         " Mouse support
set showcmd         " Show command chars
set wildmenu        " Use tab to complete commands
" set lazyredraw      " Speed up slow connections; prevent redraws when not needed
set showmatch       " Show matched parens, etc.
set incsearch       " Highlight searched text matches
set hlsearch

" disable background color erasure
set t_ut=

if has('mouse_sgr') 
	set ttymouse=sgr
else
	set ttymouse=xterm2
endif

" Toggle paste mode with F9
set pastetoggle=<f9>


" Code Folding
set foldmethod=syntax
set foldlevelstart=1
let perl_fold=1
let javaScript_fold=1
let php_folding=1
let xml_syntax_folding=1

" Enable plugin for perl support
filetype plugin on
filetype indent on


" Custom cursorline and StatusLine
set cursorline
hi CursorLine cterm=NONE ctermbg=235 guibg=#343434
set statusline=%t[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%m%r%y%=%c,%l/%L\ %P\ %{fugitive#statusline()}
let Tlist_Auto_Open = 1

" NERDTree
let g:NERDTreeWinPos = "right"
let NERDTreeIgnore=['\.swp$']
let NERDTreeChDirMode=1
let NERDTreeQuitOnOpen=0
let NERDTreeMinimalUI=1
let g:nerdtree_tabs_open_on_console_startup = 1
" autocmd vimenter * if !argc() | NERDTree | endif


" Filetypes
au BufnewFile,BufRead *.tt setlocal ft=tt2

" Perl stuff
au FileType perl nmap <C-F6> :%!perltidy<CR>

set tags=tags;

nnoremap <silent> <F9> :NERDTreeTabsToggle<CR>
nnoremap <silent> <F10> :TlistToggle<CR>

" YCM settings
let g:ycm_complete_in_strings = 0
let g:ycm_register_as_syntastic_checker = 0

" tmux config
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

set backupdir=/tmp

if has("cscope")
      set csprg=/usr/bin/cscope
      set csto=0
      set cst
      set nocsverb
      " add any database in current directory
      if filereadable("cscope.out")
          cs add cscope.out
      " else add database pointed to by environment
      elseif $CSCOPE_DB != ""
          cs add $CSCOPE_DB
      endif
      set csverb
   endif

nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>

nnoremap <silent> <F4> :FufFile<CR>

autocmd cursorhold * set nohlsearch
noremap n :set hlsearch<cr>n
noremap N :set hlsearch<cr>N
noremap / :set hlsearch<cr>/
noremap ? :set hlsearch<cr>?
